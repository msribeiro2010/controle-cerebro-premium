// Script de teste para verificar a l√≥gica de compara√ß√£o de OJs
// Simulando o problema reportado com a Vanessa

// OJs da configura√ß√£o da Vanessa (do usu√°rio)
const ojsConfiguracaoVanessa = [
  "Divis√£o de Execu√ß√£o de Limeira",
  "Juizado Especial da Inf√¢ncia e Adolesc√™ncia de Franca", 
  "Juizado Especial da Inf√¢ncia e Adolesc√™ncia de S√£o Jos√© Dos Campos",
  "1¬™ Vara do Trabalho de Franca",
  "1¬™ Vara do Trabalho de S√£o Jos√© Dos Campos", 
  "2¬™ Vara do Trabalho de Franca",
  "2¬™ Vara do Trabalho de S√£o Jos√© Dos Campos",
  "3¬™ Vara do Trabalho de S√£o Jos√© Dos Campos",
  "4¬™ Vara do Trabalho de S√£o Jos√© Dos Campos",
  "5¬™ Vara do Trabalho de S√£o Jos√© Dos Campos"
];

// OJs que poderiam estar cadastrados no sistema (simulando diferentes formatos)
const ojsCadastradosSimulados = [
  "Divis√£o de Execu√ß√£o - Limeira",
  "Juizado Especial da Inf√¢ncia e da Adolesc√™ncia de Franca",
  "Juizado Especial da Inf√¢ncia e da Adolesc√™ncia de S√£o Jos√© dos Campos", 
  "1¬™ Vara do Trabalho - Franca",
  "Primeira Vara do Trabalho de S√£o Jos√© dos Campos",
  "2¬™ Vara do Trabalho - Franca", 
  "Segunda Vara do Trabalho de S√£o Jos√© dos Campos",
  "3¬™ Vara do Trabalho - S√£o Jos√© dos Campos",
  "Quarta Vara do Trabalho de S√£o Jos√© dos Campos",
  "5¬™ Vara do Trabalho - S√£o Jos√© dos Campos"
];

// Fun√ß√£o de normaliza√ß√£o (copiada do script principal)
const normalizarNome = (nome) => {
  let normalizado = nome.toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '') // Remove acentos
    .replace(/[^a-z0-9\s]/g, '') // Remove caracteres especiais
    .trim();
  return normalizado;
};

// Fun√ß√£o de compara√ß√£o de OJs (copiada do script principal)
const ojsEquivalentes = (oj1, oj2) => {
  const norm1 = normalizarNome(oj1);
  const norm2 = normalizarNome(oj2);
  
  // Compara√ß√£o exata primeiro
  if (norm1 === norm2) return true;
  
  // Extrair cidade do OJ do JSON (formato: "CON1 - Campinas" ou "Bauru")
  const extrairCidade = (ojJson) => {
    const normalizado = normalizarNome(ojJson);
    // Se tem formato "CON1 - Cidade", extrair a cidade
    const match = normalizado.match(/^(con\d+|exe\d+)\s*-?\s*(.+)$/);
    if (match) {
      return match[2].trim(); // Retorna a cidade
    }
    // Se n√£o tem prefixo, √© s√≥ a cidade
    return normalizado.trim();
  };
  
  // Extrair cidade do OJ do banco (formato: "Tribunal de Justi√ßa - Bauru" ou "1¬™ Vara C√≠vel de Campinas")
  const extrairCidadeDoBanco = (ojBanco) => {
    const normalizado = normalizarNome(ojBanco);
    
    // Padr√µes comuns de OJs no banco
    const padroes = [
      /tribunal de justica\s*-?\s*(.+)$/,           // "Tribunal de Justi√ßa - Bauru"
      /\d*[a¬™¬∞]?\s*vara.*?de\s+(.+)$/,             // "1¬™ Vara C√≠vel de Campinas"
      /vara.*?de\s+(.+)$/,                         // "Vara da Fazenda P√∫blica de Bauru"
      /foro\s+de\s+(.+)$/,                         // "Foro de Campinas"
      /comarca\s+de\s+(.+)$/,                      // "Comarca de Jundia√≠"
      /(.+)$/                                      // Fallback - nome completo
    ];
    
    for (const padrao of padroes) {
      const match = normalizado.match(padrao);
      if (match && match[1]) {
        return match[1].trim();
      }
    }
    
    return normalizado.trim();
  };
  
  // Extrair cidades de ambos os OJs
  const cidadeJson = extrairCidade(oj1);
  const cidadeBanco = extrairCidadeDoBanco(oj2);
  
  // Verificar se as cidades s√£o equivalentes
  if (cidadeJson === cidadeBanco) {
    return true;
  }
  
  // Verificar se a cidade do banco cont√©m a cidade do JSON
  if (cidadeBanco.includes(cidadeJson) || cidadeJson.includes(cidadeBanco)) {
    return true;
  }
  
  // L√≥gica original para casos de numera√ß√£o de varas
  const semNumero1 = norm1.replace(/^\d+[a¬™¬∞]?\s*/, '');
  const semNumero2 = norm2.replace(/^\d+[a¬™¬∞]?\s*/, '');
  
  if (semNumero1 === semNumero2) {
    const temNumero1 = /^\d+[a¬™¬∞]?\s+vara/.test(norm1);
    const temNumero2 = /^\d+[a¬™¬∞]?\s+vara/.test(norm2);
    
    if (!temNumero1 && temNumero2 && norm2.startsWith('1')) {
      return true;
    }
    if (!temNumero2 && temNumero1 && norm1.startsWith('1')) {
      return true;
    }
  }
  
  return false;
};

// Teste da verifica√ß√£o
console.log('üîç TESTE DE VERIFICA√á√ÉO DE OJs - VANESSA CARDOZO DE ALMEIDA');
console.log('=' .repeat(80));

console.log('\nüìã OJs da configura√ß√£o (esperados):');
ojsConfiguracaoVanessa.forEach((oj, index) => {
  console.log(`${index + 1}. ${oj}`);
});

console.log('\nüìã OJs simulados como cadastrados no sistema:');
ojsCadastradosSimulados.forEach((oj, index) => {
  console.log(`${index + 1}. ${oj}`);
});

console.log('\nüîç AN√ÅLISE DE CORRESPOND√äNCIAS:');
console.log('=' .repeat(50));

let ojsEncontrados = [];
let ojsNaoEncontrados = [];

ojsConfiguracaoVanessa.forEach((ojEsperado, index) => {
  console.log(`\n${index + 1}. Verificando: "${ojEsperado}"`);
  
  let encontrado = false;
  for (let i = 0; i < ojsCadastradosSimulados.length; i++) {
    const ojCadastrado = ojsCadastradosSimulados[i];
    if (ojsEquivalentes(ojEsperado, ojCadastrado)) {
      console.log(`   ‚úÖ MATCH encontrado com: "${ojCadastrado}"`);
      ojsEncontrados.push({
        esperado: ojEsperado,
        encontrado: ojCadastrado
      });
      encontrado = true;
      break;
    }
  }
  
  if (!encontrado) {
    console.log(`   ‚ùå N√ÉO ENCONTRADO`);
    ojsNaoEncontrados.push(ojEsperado);
  }
});

console.log('\nüìä RESUMO DOS RESULTADOS:');
console.log('=' .repeat(50));
console.log(`‚úÖ OJs encontrados: ${ojsEncontrados.length}/${ojsConfiguracaoVanessa.length}`);
console.log(`‚ùå OJs n√£o encontrados: ${ojsNaoEncontrados.length}/${ojsConfiguracaoVanessa.length}`);

if (ojsNaoEncontrados.length > 0) {
  console.log('\n‚ùå OJs que n√£o foram reconhecidos:');
  ojsNaoEncontrados.forEach((oj, index) => {
    console.log(`${index + 1}. ${oj}`);
  });
}

console.log('\nüîç AN√ÅLISE DETALHADA DE NORMALIZA√á√ÉO:');
console.log('=' .repeat(50));

ojsConfiguracaoVanessa.forEach((oj, index) => {
  const normalizado = normalizarNome(oj);
  console.log(`${index + 1}. Original: "${oj}"`);
  console.log(`   Normalizado: "${normalizado}"`);
});

console.log('\nüîç POSS√çVEIS PROBLEMAS IDENTIFICADOS:');
console.log('=' .repeat(50));

// Verificar problemas comuns
const problemasIdentificados = [];

// Problema 1: Diferen√ßas em "da" vs "de"
const temDiferencaPreposicao = ojsConfiguracaoVanessa.some(oj => 
  oj.includes('da Inf√¢ncia e Adolesc√™ncia') && 
  !ojsCadastradosSimulados.some(ojCad => 
    ojCad.includes('da Inf√¢ncia e Adolesc√™ncia')
  )
);

if (temDiferencaPreposicao) {
  problemasIdentificados.push('Diferen√ßas em preposi√ß√µes ("da" vs "de")');
}

// Problema 2: Numera√ß√£o por extenso vs num√©rica
const temDiferencaNumeracao = ojsConfiguracaoVanessa.some(oj => 
  /^\d+[¬™¬∫]/.test(oj)
) && ojsCadastradosSimulados.some(oj => 
  /(primeira|segunda|terceira|quarta|quinta)/i.test(oj)
);

if (temDiferencaNumeracao) {
  problemasIdentificados.push('Numera√ß√£o por extenso vs num√©rica');
}

// Problema 3: Presen√ßa/aus√™ncia de h√≠fens
const temDiferencaHifen = ojsConfiguracaoVanessa.some(oj => 
  !oj.includes(' - ')
) && ojsCadastradosSimulados.some(oj => 
  oj.includes(' - ')
);

if (temDiferencaHifen) {
  problemasIdentificados.push('Presen√ßa/aus√™ncia de h√≠fens separadores');
}

if (problemasIdentificados.length > 0) {
  problemasIdentificados.forEach((problema, index) => {
    console.log(`${index + 1}. ${problema}`);
  });
} else {
  console.log('Nenhum problema √≥bvio identificado na l√≥gica de compara√ß√£o.');
}

console.log('\nüéØ CONCLUS√ÉO:');
console.log('=' .repeat(50));

if (ojsEncontrados.length === ojsConfiguracaoVanessa.length) {
  console.log('‚úÖ SUCESSO: Todos os OJs foram reconhecidos corretamente!');
  console.log('   O problema pode estar em outro lugar (banco de dados, carregamento, etc.)');
} else {
  console.log('‚ùå PROBLEMA IDENTIFICADO: Alguns OJs n√£o foram reconhecidos.');
  console.log('   A l√≥gica de compara√ß√£o precisa ser ajustada.');
  console.log(`   Taxa de sucesso: ${((ojsEncontrados.length / ojsConfiguracaoVanessa.length) * 100).toFixed(1)}%`);
}