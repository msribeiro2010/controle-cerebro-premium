/**
 * Script para consultar registros da servidora Juliana Pires de Almeida Gon√ßalves
 * e comparar com as varas atribu√≠das para manter apenas as que ainda n√£o constam no cadastro
 */

const ServidorDatabaseService = require('./src/utils/servidor-database-service');

// Dados da servidora fornecidos
const servidoraInfo = {
  nome: "Juliana Pires de Almeida Gon√ßalves",
  cpf: "275.392.168-75",
  cargo: "Assessor",
  varasAtribuidas: [
    "Vara do Trabalho de Sumar√©",
    "Vara do Trabalho de Hortol√¢ndia", 
    "1¬™ Vara do Trabalho de Limeira",
    "2¬™ Vara do Trabalho de Limeira",
    "Vara do Trabalho de Santa B√°rbara D'Oeste",
    "Vara do Trabalho de S√£o Jo√£o da Boa Vista"
  ]
};

async function consultarServidora() {
  try {
    console.log('üîç Iniciando consulta para a servidora:', servidoraInfo.nome);
    console.log('üìã CPF:', servidoraInfo.cpf);
    console.log('üíº Cargo:', servidoraInfo.cargo);
    console.log('üìç Varas atribu√≠das:', servidoraInfo.varasAtribuidas.length);
    
    const servidorService = new ServidorDatabaseService();
    
    // Limpar CPF (remover formata√ß√£o)
    const cpfLimpo = servidoraInfo.cpf.replace(/\D/g, '');
    console.log('üî¢ CPF limpo:', cpfLimpo);
    
    // 1. Buscar OJs j√° cadastrados para a servidora no 1¬∫ grau
    console.log('\nüìä Buscando OJs j√° cadastrados no 1¬∫ grau...');
    const ojsCadastrados1Grau = await servidorService.buscarOJsDoServidor(cpfLimpo, '1');
    
    // 2. Buscar OJs j√° cadastrados para a servidora no 2¬∫ grau  
    console.log('üìä Buscando OJs j√° cadastrados no 2¬∫ grau...');
    const ojsCadastrados2Grau = await servidorService.buscarOJsDoServidor(cpfLimpo, '2');
    
    // Combinar todos os OJs cadastrados
    const todosOjsCadastrados = [
      ...ojsCadastrados1Grau.map(oj => ({ ...oj, grau: '1' })),
      ...ojsCadastrados2Grau.map(oj => ({ ...oj, grau: '2' }))
    ];
    
    console.log('\n‚úÖ RESULTADO DA CONSULTA:');
    console.log('=' .repeat(60));
    console.log(`üë§ Servidora: ${servidoraInfo.nome}`);
    console.log(`üÜî CPF: ${servidoraInfo.cpf}`);
    console.log(`üìä Total de OJs j√° cadastrados: ${todosOjsCadastrados.length}`);
    
    if (todosOjsCadastrados.length > 0) {
      console.log('\nüìã OJs j√° cadastrados no sistema:');
      todosOjsCadastrados.forEach((oj, index) => {
        console.log(`  ${index + 1}. ${oj.orgaoJulgador} (${oj.grau}¬∫ grau) - Perfil: ${oj.perfil}`);
      });
    } else {
      console.log('\n‚ö†Ô∏è  Nenhum OJ encontrado no sistema para esta servidora.');
    }
    
    // 3. Comparar com as varas atribu√≠das
    console.log('\nüîç AN√ÅLISE DAS VARAS ATRIBU√çDAS:');
    console.log('=' .repeat(60));
    
    const varasParaCadastrar = [];
    const varasJaCadastradas = [];
    
    servidoraInfo.varasAtribuidas.forEach(vara => {
      // Verificar se a vara j√° est√° cadastrada (busca flex√≠vel)
      const jaExiste = todosOjsCadastrados.some(oj => {
        const ojNormalizado = oj.orgaoJulgador.toLowerCase()
          .replace(/[^\w\s]/g, '')
          .replace(/\s+/g, ' ')
          .trim();
        const varaNormalizada = vara.toLowerCase()
          .replace(/[^\w\s]/g, '')
          .replace(/\s+/g, ' ')
          .trim();
        
        return ojNormalizado.includes(varaNormalizada) || varaNormalizada.includes(ojNormalizado);
      });
      
      if (jaExiste) {
        const ojExistente = todosOjsCadastrados.find(oj => {
          const ojNormalizado = oj.orgaoJulgador.toLowerCase()
            .replace(/[^\w\s]/g, '')
            .replace(/\s+/g, ' ')
            .trim();
          const varaNormalizada = vara.toLowerCase()
            .replace(/[^\w\s]/g, '')
            .replace(/\s+/g, ' ')
            .trim();
          
          return ojNormalizado.includes(varaNormalizada) || varaNormalizada.includes(ojNormalizado);
        });
        
        varasJaCadastradas.push({
          varaAtribuida: vara,
          ojCadastrado: ojExistente.orgaoJulgador,
          grau: ojExistente.grau,
          perfil: ojExistente.perfil
        });
      } else {
        varasParaCadastrar.push(vara);
      }
    });
    
    console.log(`\n‚úÖ Varas j√° cadastradas (${varasJaCadastradas.length}):`);
    if (varasJaCadastradas.length > 0) {
      varasJaCadastradas.forEach((item, index) => {
        console.log(`  ${index + 1}. ${item.varaAtribuida}`);
        console.log(`     ‚Üí Cadastrada como: ${item.ojCadastrado} (${item.grau}¬∫ grau)`);
        console.log(`     ‚Üí Perfil: ${item.perfil}`);
      });
    } else {
      console.log('  Nenhuma vara j√° cadastrada encontrada.');
    }
    
    console.log(`\nüÜï Varas para cadastrar (${varasParaCadastrar.length}):`);
    if (varasParaCadastrar.length > 0) {
      varasParaCadastrar.forEach((vara, index) => {
        console.log(`  ${index + 1}. ${vara}`);
      });
      
      // Gerar arquivo JSON para automa√ß√£o
      const arquivoAutomacao = {
        servidor: {
          nome: servidoraInfo.nome,
          cpf: servidoraInfo.cpf,
          cargo: servidoraInfo.cargo,
          perfil: "Assessor"
        },
        ojs: varasParaCadastrar,
        observacoes: `Arquivo gerado automaticamente em ${new Date().toLocaleString('pt-BR')}. Cont√©m apenas as varas que ainda n√£o est√£o cadastradas no sistema.`
      };
      
      const fs = require('fs');
      const nomeArquivo = `juliana-limeira-varas-pendentes-${Date.now()}.json`;
      fs.writeFileSync(nomeArquivo, JSON.stringify(arquivoAutomacao, null, 2), 'utf8');
      
      console.log(`\nüíæ Arquivo de automa√ß√£o gerado: ${nomeArquivo}`);
      console.log('   Este arquivo cont√©m apenas as varas que precisam ser cadastradas.');
      
    } else {
      console.log('  Todas as varas j√° est√£o cadastradas no sistema! ‚úÖ');
    }
    
    console.log('\n' + '=' .repeat(60));
    console.log('üéØ RESUMO EXECUTIVO:');
    console.log(`   ‚Ä¢ Total de varas atribu√≠das: ${servidoraInfo.varasAtribuidas.length}`);
    console.log(`   ‚Ä¢ Varas j√° cadastradas: ${varasJaCadastradas.length}`);
    console.log(`   ‚Ä¢ Varas pendentes de cadastro: ${varasParaCadastrar.length}`);
    console.log(`   ‚Ä¢ Percentual j√° cadastrado: ${((varasJaCadastradas.length / servidoraInfo.varasAtribuidas.length) * 100).toFixed(1)}%`);
    
    return {
      servidora: servidoraInfo,
      ojsCadastrados: todosOjsCadastrados,
      varasJaCadastradas,
      varasParaCadastrar,
      arquivoGerado: varasParaCadastrar.length > 0 ? `juliana-limeira-varas-pendentes-${Date.now()}.json` : null
    };
    
  } catch (error) {
    console.error('‚ùå Erro durante a consulta:', error);
    throw error;
  }
}

// Executar a consulta
if (require.main === module) {
  consultarServidora()
    .then(resultado => {
      console.log('\n‚úÖ Consulta conclu√≠da com sucesso!');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n‚ùå Erro na consulta:', error.message);
      process.exit(1);
    });
}

module.exports = { consultarServidora, servidoraInfo };